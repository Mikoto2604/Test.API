// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaymentApp.Infrastructure.Drivers.DbContexts;

#nullable disable

namespace PaymentApp.Infrastructure.Migrations
{
    [DbContext(typeof(PgDbContext))]
    partial class PgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaymentApp.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("PaymentApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("BalanceCcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<short>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short>("MaxLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)3);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 8m,
                            BalanceCcy = "USD",
                            FailedLoginAttempts = (short)0,
                            IsBlocked = false,
                            Login = "User 1",
                            MaxLoginAttempts = (short)5,
                            PasswordHash = "AQAAAAIAAYagAAAAEPbRfMBiYwm+9MONMvIoRP7A0hYRdfe+yTcttw9VBNRIoOvgy6ddy6duQEiZv2RF4Q=="
                        },
                        new
                        {
                            Id = 2,
                            Balance = 8m,
                            BalanceCcy = "USD",
                            FailedLoginAttempts = (short)0,
                            IsBlocked = false,
                            Login = "User 2",
                            MaxLoginAttempts = (short)5,
                            PasswordHash = "AQAAAAIAAYagAAAAECoIOO2jYvViIx1T/msKb7dD6jvMp6RoPr631yV8iQHORYjcNzlJSr3rhBuKB6Y0+A=="
                        },
                        new
                        {
                            Id = 3,
                            Balance = 8m,
                            BalanceCcy = "USD",
                            FailedLoginAttempts = (short)0,
                            IsBlocked = false,
                            Login = "User 3",
                            MaxLoginAttempts = (short)5,
                            PasswordHash = "AQAAAAIAAYagAAAAEBQqVyF/C2q5tJdQfFjQakwEGU0dmTXWLLE20ULWdAcr522uBdO/8epQ/HuHff/tJQ=="
                        },
                        new
                        {
                            Id = 4,
                            Balance = 8m,
                            BalanceCcy = "USD",
                            FailedLoginAttempts = (short)0,
                            IsBlocked = false,
                            Login = "User 4",
                            MaxLoginAttempts = (short)5,
                            PasswordHash = "AQAAAAIAAYagAAAAECq3e2ltZC0mPfLglCJjeUmq6a4CRzOrstJn1gf1NaOs9jHJSJZslgVaXkorLQJvNg=="
                        },
                        new
                        {
                            Id = 5,
                            Balance = 8m,
                            BalanceCcy = "USD",
                            FailedLoginAttempts = (short)0,
                            IsBlocked = false,
                            Login = "User 5",
                            MaxLoginAttempts = (short)5,
                            PasswordHash = "AQAAAAIAAYagAAAAEEDAW4Y3xVZY1hFPspXX/PF+gANWffip1fmv+07fO8Xf2Tll/XfAoYveGXd2wiaUWw=="
                        });
                });

            modelBuilder.Entity("PaymentApp.Domain.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RevokedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("User_tokens", (string)null);
                });

            modelBuilder.Entity("PaymentApp.Domain.Entities.Payment", b =>
                {
                    b.HasOne("PaymentApp.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentApp.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("PaymentApp.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
